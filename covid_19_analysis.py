# -*- coding: utf-8 -*-
"""Covid 19 Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Ckel6_XjzFhrjqqm9J5kqrt5SLdkrxx
"""

!pip install plotly==4.8
import pandas as pd
import numpy as np
import plotly.express as px
print('modules are imported')

"""load dataset"""

dataset_url='https://raw.githubusercontent.com/datasets/covid-19/master/data/countries-aggregated.csv'
df=pd.read_csv(dataset_url)

"""check dataframe"""

df.head()

df.tail()

df.shape

"""## pre-processing data"""

df=df[df.Confirmed > 0]
df_sort=df[df.Confirmed > 0].sort_values(by =['Date']); 
#df[df.Country=='China']
df_sort.head()

fig=px.choropleth(df_sort, locations='Country', locationmode='country names',color='Confirmed',animation_frame='Date')
# animation_frame will follow the order of column 'Date'
fig.update_layout(title_text='Global Spread of COVID-19')
# name graph
fig.show()

fig=px.choropleth(df, locations='Country', locationmode='country names',color='Deaths',animation_frame='Date')
fig.update_layout(title_text='Global Deaths of COVID-19')
fig.show()

"""## Task 3: 

### Visualizing how intensive the Covid-19 Transmission has been in each country by measuring new increased cases in last 24 hours
"""

df_China=df[df.Country=='China']
df_China.head()

df_China=df_China[['Date','Confirmed']]
df_China.head()

"""calculate the first derivation of confirmed column, save it in a new column"""

df_China['New Confirmed']=df_China['Confirmed'].diff()
df_China['Confirmed']=df_China['Confirmed'].astype(float)
# create a new column to show the diff
# you can choose to use Series or dataFrame
df_China.head()

# type(df_China['Confirmed']) --> pandas.core.series.Series

"""draw a graph to show the change"""

fig=px.line(df_China, x='Date', y=['Confirmed','New Confirmed'])
fig.update_layout(title_text='New Confirmed cases of COVID-19')
#fig=px.line(df_China, x='Date', y='Confirmed')
#fig.add_scatter(x=df_China['Date'], y=df_China['Confirmed Deriv'],mode='lines',name='Confirmed Deriv')
fig.show()

df_China['New Confirmed'].max()

"""# Task 3.2
## calculate the maximum new infections for each country
"""

df_sort

countries= list(df_sort['Country'].unique())
max_infection_rate=[]
for i in countries: 
  MIR=df[df.Country==i].Confirmed.diff().max()
  max_infection_rate.append(MIR)

"""## Task 3.3
### plot barchart to show maximum new infection in each country
"""

df_MIR=pd.DataFrame()
df_MIR['Country']=countries
df_MIR['Max Infection Rate']=max_infection_rate
df_MIR.head()

px.bar(df_MIR,x='Country',y='Max Infection Rate',color='Country',title='Global Maximum New Infections',log_y=True)

"""# Task 4: 
See how National Lockdown began in 9th March 2020 impacts Covid 19 transmission in Italy
"""

df_italy=df[df.Country=='Italy']

"""calculate the daily new infections in Italy"""

df_italy['New Infection']=df_italy.Confirmed.diff()
df_italy

italy_lockdown_start_date='2020-03-09'
italy_lockdown_after_a_month='2020-04-09'
fig=px.line(df_italy,x='Date',y='New Infection',title='Before and After Lockdown')
fig.add_shape(
    type='line',
    x0 =italy_lockdown_start_date,
    y0 =0,
    x1 =italy_lockdown_start_date,
    y1 = df_italy['New Infection'].max(),
    line=dict(color='red',width=2)
)
fig.add_annotation(
    x =italy_lockdown_start_date,
    y = df_italy['New Infection'].max(),
    text='Starting date of the lockdown'
)
fig.add_shape(
    type='line',
    x0 =italy_lockdown_after_a_month,
    y0 =0,
    x1 =italy_lockdown_after_a_month,
    y1 = df_italy['New Infection'].max(),
    line=dict(color='red',width=2)
)
fig.add_annotation(
    x =italy_lockdown_after_a_month,
    y = 0,
    text='Lockdown after a month'
)
fig.show()

"""# Task 5: See How National Lockdown Impacts COVID 19 Deaths rate in Italy"""

df_italy

"""calculate death rate"""

df_italy['New Deaths']=df_italy['Deaths'].diff()
df_italy['Confirmed']=df_italy['Confirmed'].astype(float)
df_italy

"""plot a line chart to compare COVID 19 national lockdown impacts on spread of the virus and death rate"""

italy_lockdown_start_date='2020-03-09'
italy_lockdown_after_a_month='2020-04-09'
fig=px.line(df_italy, x='Date', y=['New Infection','New Deaths'],title='Lockdown Impact of COVID-19')
fig.add_shape(
    type='line',
    x0 =italy_lockdown_start_date,
    y0 =0,
    x1 =italy_lockdown_start_date,
    y1 = df_italy['New Infection'].max(),
    line=dict(color='green',width=2)
)
fig.add_annotation(
    x =italy_lockdown_start_date,
    y = df_italy['New Infection'].max(),
    text='Starting date of the lockdown'
)
fig.add_shape(
    type='line',
    x0 =italy_lockdown_after_a_month,
    y0 =0,
    x1 =italy_lockdown_after_a_month,
    y1 = df_italy['New Infection'].max(),
    line=dict(color='green',width=2)
)
fig.add_annotation(
    x =italy_lockdown_after_a_month,
    y = 0,
    text='Lockdown after a month'
)
fig.show()

"""But we hope to see the pattern of these two variables, whether they share any similiarities, so we need to normalize these two columns"""

df_italy['New Infection Norm']=df_italy['New Infection']/df_italy['New Infection'].max()
df_italy['New Deaths Norm']=df_italy['New Deaths']/df_italy['New Deaths'].max()

"""plot the chart again"""

fig=px.line(df_italy,x='Date',y=['New Infection Norm','New Deaths Norm'],title='Lockdown Impact of COVID-19')
fig.add_shape(
    type='line',
    x0 =italy_lockdown_start_date,
    y0 =0,
    x1 =italy_lockdown_start_date,
    y1 = df_italy['New Infection Norm'].max(),
    line=dict(color='black',width=2)
)
fig.add_annotation(
    x =italy_lockdown_start_date,
    y = df_italy['New Infection Norm'].max(),
    text='Starting date of the lockdown'
)
fig.add_shape(
    type='line',
    x0 =italy_lockdown_after_a_month,
    y0 =0,
    x1 =italy_lockdown_after_a_month,
    y1 = df_italy['New Infection Norm'].max(),
    line=dict(color='orange',width=2)
)
fig.add_annotation(
    x =italy_lockdown_after_a_month,
    y = 0,
    text='Lockdown after a month'
)
fig.show()