# -*- coding: utf-8 -*-
"""covid19 GDP-infection analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rhl1IFCL6RSYV9HUDiOwp4fZ8nUAS0Pi

# Covid19 Data Analysis
------------------------------------------

### Import the modules
"""

import pandas as pd 
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt

"""## Task 1

### Task 1.1: importing covid19 dataset
importing "Covid19_Confirmed_dataset.csv" from "./Dataset" folder.
"""

url = 'https://raw.githubusercontent.com/tsheng0315/Projects-on-CV/main/COVID-19%20Data%20Analysis/Dataset/covid19_Confirmed_dataset.csv'
df_Confirmed = pd.read_csv(url)
df_Confirmed.head(10)

"""#### Let's check the shape of the dataframe"""

df_Confirmed.shape

"""### Task 2.2: Delete the useless columns"""

#df=df_Confirmed.drop(['Lat','Long'], axis=1) # return a copy 
df_Confirmed.drop(['Lat','Long'], axis=1,inplace=True) # change on the original data frame
df_Confirmed.head(10)
df_Confirmed[df_Confirmed['Country/Region']=='China']

"""### Task 2.3: Aggregating the rows by the country"""

df_Confirmed_aggr=df_Confirmed.groupby('Country/Region').sum()
df_Confirmed_aggr.head()

df_Confirmed_aggr.shape

"""### Task 2.4: Visualizing data related to a country for example China, Italy and the UK
visualization always helps for better understanding of our data.
"""

# df_Confirmed_aggr[df_Confirmed_aggr['Country/Region']=='China']
# after aggregate, column name 'Country/Region' no longer exists
df_Confirmed_aggr.loc['China'].plot()
df_Confirmed_aggr.loc['Italy'].plot()
df_Confirmed_aggr.loc['United Kingdom'].plot()

plt.legend()

"""### Task3: Calculating a good measure 
we need to find a good measure reperestend as a number, describing the spread of the virus in a country.
"""

df_Confirmed_aggr.loc['China'].plot()

df_Confirmed_aggr.loc['China'][:3].plot()
# first three days' cases

"""### task 3.1: caculating the new infections in China (first derivative of the sum curve)"""

df_Confirmed_aggr.loc['China'].diff().plot()

"""### task 3.2: find maxmimum infection rate for China, Italy and the UK"""

df_Confirmed_aggr.loc['China'].diff().max()

df_Confirmed_aggr.loc['Italy'].diff().max()

df_Confirmed_aggr.loc['United Kingdom'].diff().max()

"""### Task 3.3: find maximum infection rate for all of the countries."""

countries=df_Confirmed_aggr.index
max_infection_rate=[]
for i in countries:
  MIR=df_Confirmed_aggr.loc[i].diff().max()
  max_infection_rate.append(MIR)
df_Confirmed_aggr['Max Infection Rate']=max_infection_rate

df_Confirmed_aggr.head()

"""### Task 3.4: create a new dataframe with only needed column"""

covid_data=pd.DataFrame(df_Confirmed_aggr['Max Infection Rate'])
# the index will appear automatically

covid_data.head()

"""### Task4: 
- Importing the WorldHappinessReport.csv dataset
- selecting needed columns for our analysis 
- join the datasets 
- calculate the correlations as the result of our analysis

### Task 4.1 : importing the dataset
"""

url='https://raw.githubusercontent.com/tsheng0315/Projects-on-CV/main/COVID-19%20Data%20Analysis/Dataset/worldwide_happiness_report.csv'
df_happiness_report=pd.read_csv(url)

df_happiness_report.head()

"""### Task 4.2: let's drop the useless columns"""

useless_cols=['Overall rank','Score','Generosity','Perceptions of corruption']

df_happiness_report.drop(useless_cols,axis=1,inplace=True)
df_happiness_report.head()

"""### Task 4.3: changing the indices of the dataframe to country names"""

df_happiness_report.set_index('Country or region',inplace=True)
df_happiness_report.head()

"""### Task4.4: now let's join two dataset we have prepared

#### Corona Dataset :
"""

covid_data.head()

covid_data.shape

"""#### wolrd happiness report Dataset :"""

df_happiness_report.head()

df_happiness_report.shape

# 187 countries > 156 countries->> inner join
data=covid_data.join(df_happiness_report, how='inner')
data.head()

"""### Task 4.5: correlation matrix"""

data.corr()

"""### Task 5: Visualization of the results
our Analysis is not finished unless we visualize the results in terms figures and graphs so that everyone can understand what you get out of our analysis
"""

data.head()

"""### Task 5.1: Plotting GDP vs maximum Infection rate"""

x= data['GDP per capita']
y=data['Max Infection Rate']
sns.scatterplot(x,y)

"""as GDP per capita grows, the max infection rate grows. But doesn't show enough details in y axis. So we use log in y axis."""

x= data['GDP per capita']
y=data['Max Infection Rate']
sns.scatterplot(x,np.log(y))

sns.regplot(x,np.log(y))

"""### Task 5.2: Plotting Social support vs maximum Infection rate"""

x= data['Social support']
y=data['Max Infection Rate']
sns.regplot(x,np.log(y))

"""### Task 5.3: Plotting Healthy life expectancy vs maximum Infection rate"""

x= data['Healthy life expectancy']
y=data['Max Infection Rate']
sns.regplot(x,np.log(y))

"""### Task 5.4: Plotting Freedom to make life choices vs maximum Infection rate"""

x= data['Freedom to make life choices']
y=data['Max Infection Rate']
sns.regplot(x,np.log(y))

"""From the graph, it seems the infection rate in well developed countries are higher. But people may say it is because in developing countries many cases haven't been detected. So we turn to death rate for help."""

url = 'https://raw.githubusercontent.com/tsheng0315/Projects-on-CV/main/COVID-19%20Data%20Analysis/Dataset/covid19_deaths_dataset.csv'
df_death = pd.read_csv(url)
df_death.head(10)

drop_cols_death=['Lat','Long']
df_death.drop(drop_cols_death,axis=1,inplace=True)
df_death.head()

df_death_agg=df_death.groupby('Country/Region').sum()
df_death_agg.head()

countries_death=df_death_agg.index
max_death_rate=[]
for i in countries_death:
  MIR=df_death_agg.loc[i].diff().max()
  max_death_rate.append(MIR)
df_death_agg['Max Death Rate']=max_death_rate
df_death_agg.head()

covid_death=pd.DataFrame(df_death_agg['Max Death Rate'])
covid_death.head()
# the index will appear automatically

covid_death.shape

df_happiness_report.shape

# 187 countries > 156 countries->> inner join
death_happiness=covid_death.join(df_happiness_report, how='inner')
death_happiness.head()

fig, (ax1, ax2,ax3) = plt.subplots(1,3,figsize=(15,3))
x=death_happiness['GDP per capita']
y=death_happiness['Max Death Rate']
x2=death_happiness['Social support']
y2=death_happiness['Max Death Rate']

x3=death_happiness['Freedom to make life choices']
y3=death_happiness['Max Death Rate']

sns.regplot(x, y,ax=ax1)
sns.regplot(x2, y2,ax=ax2)
sns.regplot(x3, y3,ax=ax3)

x=death_happiness['GDP per capita']
y=death_happiness['Max Death Rate']
sns.regplot(x, y)

x=death_happiness['Social support']
y=death_happiness['Max Death Rate']
sns.regplot(x, y)

x=death_happiness['Healthy life expectancy']
y=death_happiness['Max Death Rate']
sns.regplot(x, y)

x=death_happiness['Freedom to make life choices']
y=death_happiness['Max Death Rate']
sns.regplot(x, y)